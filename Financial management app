import UIKit

struct Transaction {
    var name: String
    var amount: Double
    var category: String
    var date: Date
}

class ViewController: UIViewController {
    @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var amountTextField: UITextField!
    @IBOutlet weak var categoryTextField: UITextField!
    @IBOutlet weak var datePicker: UIDatePicker!
    @IBOutlet weak var tableView: UITableView!

    var transactions: [Transaction] = []

    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.dataSource = self
    }

    @IBAction func addTransaction(_ sender: UIButton) {
        guard let name = nameTextField.text,
              let amountText = amountTextField.text,
              let amount = Double(amountText),
              let category = categoryTextField.text else {
            return
        }

        let transaction = Transaction(name: name, amount: amount, category: category, date: datePicker.date)
        transactions.append(transaction)
        tableView.reloadData()
        clearFields()
    }

    func clearFields() {
        nameTextField.text = ""
        amountTextField.text = ""
        categoryTextField.text = ""
    }
}

extension ViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return transactions.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "TransactionCell", for: indexPath)
        let transaction = transactions[indexPath.row]

        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MMM d, yyyy HH:mm"
        let dateString = dateFormatter.string(from: transaction.date)

        cell.textLabel?.text = "\(transaction.name) (\(transaction.category))"
        cell.detailTextLabel?.text = String(format: "$%.2f • \(dateString)", transaction.amount)

        return cell
    }
}

import Foundation

struct Transaction {
    var name: String
    var amount: Double
    var category: String
    var date: Date
}
import Foundation

class TransactionManager {
    var transactions: [Transaction] = []

    func addTransaction(name: String, amount: Double, category: String, date: Date) {
        let transaction = Transaction(name: name, amount: amount, category: category, date: date)
        transactions.append(transaction)
    }
}
import UIKit

class ViewController: UIViewController {
    @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var amountTextField: UITextField!
    @IBOutlet weak var categoryTextField: UITextField!
    @IBOutlet weak var datePicker: UIDatePicker!
    @IBOutlet weak var tableView: UITableView!

    var transactionManager = TransactionManager()

    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.dataSource = self
    }

    @IBAction func addTransaction(_ sender: UIButton) {
        guard let name = nameTextField.text,
              let amountText = amountTextField.text,
              let amount = Double(amountText),
              let category = categoryTextField.text else {
            return
        }

        let date = datePicker.date
        transactionManager.addTransaction(name: name, amount: amount, category: category, date: date)
        tableView.reloadData()
        clearFields()
    }

    func clearFields() {
        nameTextField.text = ""
        amountTextField.text = ""
        categoryTextField.text = ""
    }
}

extension ViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return transactionManager.transactions.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "TransactionCell", for: indexPath)
        let transaction = transactionManager.transactions[indexPath.row]

        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "MMM d, yyyy HH:mm"
        let dateString = dateFormatter.string(from: transaction.date)

        cell.textLabel?.text = "\(transaction.name) (\(transaction.category))"
        cell.detailTextLabel?.text = String(format: "$%.2f • \(dateString)", transaction.amount)

        return cell
    }
}
